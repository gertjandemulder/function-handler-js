# Example: Concrete CWL Workflow to FnO
# Input: concrete-wf.cwl.ttl

# CWL specs
@prefix CommandOutputBinding: <https://w3id.org/cwl/cwl#CommandOutputBinding/> .
@prefix Workflow:             <https://w3id.org/cwl/cwl#Workflow/> .
@prefix cwl:                  <https://w3id.org/cwl/cwl#> .
@prefix sld:                  <https://w3id.org/cwl/salad#> .

# FnO
@prefix fno:                  <https://w3id.org/function/ontology#> .
@prefix fnoc:                 <https://w3id.org/function/vocabulary/composition#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fns: <http://example.com/functions#> .

# Other
@prefix ex:                   <http://www.example.com#> .
@prefix ns1:                  <http://commonwl.org/cwltool#> .
@prefix rdf:                  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:                 <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:                  <http://www.w3.org/2001/XMLSchema#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .

# Base
@base <http://gddmulde.be#> .

# CWL documents
@prefix wf: <concrete-wf.cwl#> .
@prefix t_echo: <echo.cwl#> .
@prefix t_uc: <uppercase.cwl#> .

################################################################################
# CWL Inputs -> FnO Parameters

# echo input
t_echo:messageParameter
  a   fno:Parameter ;
  fno:type   xsd:string;
  fno:predicate t_echo:message;
.

# -n
t_echo:noTrailingNewLineParameter
  a   fno:Parameter;
  fno:type fns:option; # TODO: check with @BDM.
  fno:predicate t_echo:noTrailingNewLine ;
.

# uppercase input
t_uc:messageParameter
  a   fno:Parameter ;
  fno:type   xsd:string;
  fno:predicate t_uc:message;
.

# workflow input
wf:messageParameter
  a   fno:Parameter ;
  fno:type   xsd:string ;
  fno:predicate wf:message ;
.

wf:noTrailingNewLineParameter
  a   fno:Parameter;
  fno:type fns:option; # TODO: check with @BDM.
  fno:predicate wf:noTrailingNewLine ;
.


################################################################################
# CWL Outputs -> FnO Outputs

# echo output
t_echo:returnOutput
  a   fno:Output ;
  fno:type   xsd:string;
  fno:predicate t_echo:out;
.

# uppercase output
t_uc:returnOutput
  a fno:Output ;
  fno:type xsd:string;
  fno:predicate t_uc:uppercase_message ;
.

# workflow output
wf:returnOutput
  a fno:Output ;
  fno:type   xsd:string;
  fno:predicate wf:wf_output;
.

################################################################################
# CWL Processes -> FnO Functions

# process: workflow
wf:Function
  a fno:Function;
  fno:expects ( wf:messageParameter wf:noTrailingNewLineParameter );
  fno:returns ( wf:returnOutput );
.

# process: echo
t_echo:Function
  a fno:Function;
  fno:expects ( t_echo:messageParameter t_echo:noTrailingNewLineParameter  );
  fno:returns ( t_echo:returnOutput );
.

# process: uppercase
t_uc:Function
  a fno:Function;
  fno:expects ( t_uc:messageParameter );
  fno:returns ( t_uc:returnOutput );
.


################################################################################
# CWL Workflow -> Fno Composition

wf:Composition
  a fnoc:Composition ;

  fnoc:composedOf [
    # wf.in (message) -> echo.in (message)
      fnoc:mapFrom [
        fnoc:constituentFunction wf:Function ;
        fnoc:functionParameter wf:messageParameter ;

      ];

      fnoc:mapTo [
        fnoc:constituentFunction t_echo:Function ;
        fnoc:functionParameter t_echo:messageParameter ;
      ];
    ],

    [
      # wf.in (noTrailingNewLine) -> echo.in (noTrailingNewLine)
      fnoc:mapFrom [
          fnoc:constituentFunction wf:Function ;
          fnoc:functionParameter wf:noTrailingNewLineParameter  ;

        ];
        fnoc:mapTo [
          fnoc:constituentFunction t_echo:Function ;
          fnoc:functionParameter t_echo:noTrailingNewLineParameter  ;
        ];
    ],
    # echo.out -> uppercase.in
    [
      fnoc:mapFrom [
        fnoc:constituentFunction t_echo:Function ;
        fnoc:functionOutput t_echo:returnOutput ;

      ];

      fnoc:mapTo [
        fnoc:constituentFunction t_uc:Function ;
        fnoc:functionParameter t_uc:messageParameter ;
      ];
    ],
    # uppercase.out -> wf.out
    [
      fnoc:mapFrom [
        fnoc:constituentFunction t_uc:Function ;
        fnoc:functionOutput t_uc:returnOutput ;

      ];

      fnoc:mapTo [
        fnoc:constituentFunction wf:Function ;
        fnoc:functionOutput wf:returnOutput ;
      ];
    ]

.

################################################################################
# FnO Implementations

<#dev-platform>
  a fnoi:Platform ;
  fnoi:architecture "arm64" ; # uname -m
  fnoi:operatingSystem "Darwin" ; # uname -s
.

# Echo

t_echo:Implementation
  a fno:Implementation, fnoi:RuntimeProcess ;
  fnoi:baseCommand "echo" ;
  fnoi:platform <#dev-platform> ;
.

# Uppercase

t_uc:JSExpressionImplementation
  a fno:Implementation, fnoi:JavaScriptImplementation, fnoi:JavaScriptExpression;
  doap:release [
    doap:file-release [
      ex:value "message.toUpperCase()"
    ]
  ]
.

################################################################################
# FnO Mappings

## Parameter mappings

t_echo:noTrailingNewLineParameterMapping
  a fno:ParameterMapping, fnom:PositionParameterMapping, fnom:PropertyParameterMapping ;
  fnom:functionParameter t_echo:noTrailingNewLineParameter  ;
  fnom:implementationParameterPosition 0;
  fnom:implementationProperty "-n";
.


t_echo:messageParameterMapping
  a fno:ParameterMapping, fnom:PositionParameterMapping ;
  fnom:functionParameter t_echo:messageParameter ;
  fnom:implementationParameterPosition 1;
.

t_uc:messageParameterMapping
  a fno:ParameterMapping, fnom:PropertyParameterMapping ;
  fnom:functionParameter t_uc:messageParameter ;
  fnom:implementationProperty "message";
.

## Output mappings

t_echo:returnOutputputMapping
  a fno:ReturnMapping, fnom:DefaultReturnMapping;
  fnom:functionOutput t_echo:returnOutput ;
.

t_uc:outputMapping
  a fno:ReturnMapping, fnom:DefaultReturnMapping;
  fnom:functionOutput t_uc:returnOutput ;
.

# fno:Mapping

t_echo:Mapping
    a fno:Mapping ;
    fno:function t_echo:Function ;
    fno:implementation t_echo:Implementation ; # TODO: introduce a new fnoi:CommandLineTool class?
    fno:parameterMapping t_echo:messageParameterMapping ;
    fno:parameterMapping t_echo:noTrailingNewLineParameterMapping ;
    fno:returnMapping t_echo:returnOutputputMapping ;
.

t_uc:Mapping
    a fno:Mapping ;
    fno:function t_uc:Function ;
    fno:implementation t_uc:JSExpressionImplementation ;
    fno:parameterMapping t_uc:messageParameterMapping ;
    fno:returnMapping t_uc:outputMapping ;
.
